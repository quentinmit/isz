diff --git a/homeassistant/components/esphome/entity.py b/homeassistant/components/esphome/entity.py
index a6267ba17a5..f1c30a46fd7 100644
--- a/homeassistant/components/esphome/entity.py
+++ b/homeassistant/components/esphome/entity.py
@@ -29,6 +29,7 @@ from homeassistant.helpers import (
 from homeassistant.helpers.device_registry import DeviceInfo
 from homeassistant.helpers.entity import Entity
 from homeassistant.helpers.entity_platform import AddEntitiesCallback
+from homeassistant.util import slugify
 
 from .const import DOMAIN
 
@@ -312,7 +313,6 @@ ENTITY_CATEGORIES: EsphomeEnumMapper[EsphomeEntityCategory, EntityCategory | Non
 class EsphomeBaseEntity(Entity):
     """Define a base esphome entity."""
 
-    _attr_has_entity_name = True
     _attr_should_poll = False
     _device_info: EsphomeDeviceInfo
     device_entry: dr.DeviceEntry
@@ -352,6 +352,7 @@ class EsphomeEntity(EsphomeBaseEntity, Generic[_InfoT, _StateT]):
                     (DOMAIN, f"{device_info.mac_address}_{entity_info.device_id}")
                 }
             )
+            self._attr_has_entity_name = True
             # Use the pre-computed device_id_to_name mapping for O(1) lookup
             device_name = entry_data.device_id_to_name.get(
                 entity_info.device_id, device_info.name
@@ -361,9 +362,28 @@ class EsphomeEntity(EsphomeBaseEntity, Generic[_InfoT, _StateT]):
             self._attr_device_info = DeviceInfo(
                 connections={(dr.CONNECTION_NETWORK_MAC, device_info.mac_address)}
             )
-
-        if entity_info.name:
-            self.entity_id = f"{domain}.{device_name}_{entity_info.name}"
+            if device_info.friendly_name:
+                self._attr_has_entity_name = True
+
+        if not getattr(self, "_attr_has_entity_name", False):
+            #
+            # If `friendly_name` is set, we use the Friendly naming rules, if
+            # `friendly_name` is not set we make an exception to the naming rules for
+            # backwards compatibility and use the Legacy naming rules.
+            #
+            # Friendly naming
+            # - Friendly name is prepended to entity names
+            # - Device Name is prepended to entity ids
+            # - Entity id is constructed from device name and object id
+            #
+            # Legacy naming
+            # - Device name is not prepended to entity names
+            # - Device name is not prepended to entity ids
+            # - Entity id is constructed from entity name
+            #
+            self.entity_id = f"{domain}.{entity_info.object_id}"
+        elif entity_info.name:
+            self.entity_id = f"{domain}.{device_name}_{entity_info.object_id}"
         else:
             # https://github.com/home-assistant/core/issues/132532
             # If name is not set, ESPHome will use the sanitized friendly name
@@ -497,6 +517,8 @@ class EsphomeEntity(EsphomeBaseEntity, Generic[_InfoT, _StateT]):
 class EsphomeAssistEntity(EsphomeBaseEntity):
     """Define a base entity for Assist Pipeline entities."""
 
+    _attr_has_entity_name = True
+
     def __init__(self, entry_data: RuntimeEntryData) -> None:
         """Initialize the binary sensor."""
         self._entry_data = entry_data
diff --git a/homeassistant/components/esphome/manager.py b/homeassistant/components/esphome/manager.py
index 4d5de77b1e0..f5753b9e120 100644
--- a/homeassistant/components/esphome/manager.py
+++ b/homeassistant/components/esphome/manager.py
@@ -522,15 +522,6 @@ class ESPHomeManager:
         if device_info.name:
             reconnect_logic.name = device_info.name
 
-        if not device_info.friendly_name:
-            _LOGGER.info(
-                "No `friendly_name` set in the `esphome:` section of the "
-                "YAML config for device '%s' (MAC: %s); It's recommended "
-                "to add one for easier identification and better alignment "
-                "with Home Assistant naming conventions",
-                device_info.name,
-                device_mac,
-            )
         # Build device_id_to_name mapping for efficient lookup
         entry_data.device_id_to_name = {
             sub_device.device_id: sub_device.name or device_info.name
@@ -910,7 +901,7 @@ def _async_setup_device_registry(
         config_entry_id=entry.entry_id,
         configuration_url=configuration_url,
         connections={(dr.CONNECTION_NETWORK_MAC, device_info.mac_address)},
-        name=entry_data.friendly_name or entry_data.name,
+        name=entry_data.friendly_name,
         manufacturer=manufacturer,
         model=model,
         sw_version=sw_version,
diff --git a/tests/components/esphome/test_alarm_control_panel.py b/tests/components/esphome/test_alarm_control_panel.py
index ff16731b44e..13d9feec9fc 100644
--- a/tests/components/esphome/test_alarm_control_panel.py
+++ b/tests/components/esphome/test_alarm_control_panel.py
@@ -58,7 +58,7 @@ async def test_generic_alarm_control_panel_requires_code(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("alarm_control_panel.test_my_alarm_control_panel")
+    state = hass.states.get("alarm_control_panel.test_myalarm_control_panel")
     assert state is not None
     assert state.state == AlarmControlPanelState.ARMED_AWAY
 
@@ -66,7 +66,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_ARM_AWAY,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -80,7 +80,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_ARM_CUSTOM_BYPASS,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -94,7 +94,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_ARM_HOME,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -108,7 +108,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_ARM_NIGHT,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -122,7 +122,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_ARM_VACATION,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -136,7 +136,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_TRIGGER,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -150,7 +150,7 @@ async def test_generic_alarm_control_panel_requires_code(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_DISARM,
         {
-            ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel",
+            ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel",
             ATTR_CODE: 1234,
         },
         blocking=True,
@@ -190,14 +190,14 @@ async def test_generic_alarm_control_panel_no_code(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("alarm_control_panel.test_my_alarm_control_panel")
+    state = hass.states.get("alarm_control_panel.test_myalarm_control_panel")
     assert state is not None
     assert state.state == AlarmControlPanelState.ARMED_AWAY
 
     await hass.services.async_call(
         ALARM_CONTROL_PANEL_DOMAIN,
         SERVICE_ALARM_DISARM,
-        {ATTR_ENTITY_ID: "alarm_control_panel.test_my_alarm_control_panel"},
+        {ATTR_ENTITY_ID: "alarm_control_panel.test_myalarm_control_panel"},
         blocking=True,
     )
     mock_client.alarm_control_panel_command.assert_has_calls(
@@ -235,6 +235,6 @@ async def test_generic_alarm_control_panel_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("alarm_control_panel.test_my_alarm_control_panel")
+    state = hass.states.get("alarm_control_panel.test_myalarm_control_panel")
     assert state is not None
     assert state.state == STATE_UNKNOWN
diff --git a/tests/components/esphome/test_binary_sensor.py b/tests/components/esphome/test_binary_sensor.py
index 0e3bcc5a115..a1a901bb0a4 100644
--- a/tests/components/esphome/test_binary_sensor.py
+++ b/tests/components/esphome/test_binary_sensor.py
@@ -35,7 +35,7 @@ async def test_binary_sensor_generic_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == hass_state
 
@@ -62,7 +62,7 @@ async def test_status_binary_sensor(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
 
@@ -88,7 +88,7 @@ async def test_binary_sensor_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -114,13 +114,13 @@ async def test_binary_sensor_has_state_false(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
     mock_device.set_state(BinarySensorState(key=1, state=True, missing_state=False))
     await hass.async_block_till_done()
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
 
diff --git a/tests/components/esphome/test_button.py b/tests/components/esphome/test_button.py
index b85dd04e6b7..c9ab2d537ea 100644
--- a/tests/components/esphome/test_button.py
+++ b/tests/components/esphome/test_button.py
@@ -28,22 +28,22 @@ async def test_button_generic_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("button.test_my_button")
+    state = hass.states.get("button.test_mybutton")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
     await hass.services.async_call(
         BUTTON_DOMAIN,
         SERVICE_PRESS,
-        {ATTR_ENTITY_ID: "button.test_my_button"},
+        {ATTR_ENTITY_ID: "button.test_mybutton"},
         blocking=True,
     )
     mock_client.button_command.assert_has_calls([call(1, device_id=0)])
-    state = hass.states.get("button.test_my_button")
+    state = hass.states.get("button.test_mybutton")
     assert state is not None
     assert state.state != STATE_UNKNOWN
 
     await mock_device.mock_disconnect(False)
-    state = hass.states.get("button.test_my_button")
+    state = hass.states.get("button.test_mybutton")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
diff --git a/tests/components/esphome/test_camera.py b/tests/components/esphome/test_camera.py
index 2f3966fe1f6..0989edc1c3d 100644
--- a/tests/components/esphome/test_camera.py
+++ b/tests/components/esphome/test_camera.py
@@ -40,7 +40,7 @@ async def test_camera_single_image(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
 
@@ -50,9 +50,9 @@ async def test_camera_single_image(
     mock_client.request_single_image = _mock_camera_image
 
     client = await hass_client()
-    resp = await client.get("/api/camera_proxy/camera.test_my_camera")
+    resp = await client.get("/api/camera_proxy/camera.test_mycamera")
     await hass.async_block_till_done()
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
 
@@ -84,15 +84,15 @@ async def test_camera_single_image_unavailable_before_requested(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
     await mock_device.mock_disconnect(False)
 
     client = await hass_client()
-    resp = await client.get("/api/camera_proxy/camera.test_my_camera")
+    resp = await client.get("/api/camera_proxy/camera.test_mycamera")
     await hass.async_block_till_done()
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
 
@@ -121,7 +121,7 @@ async def test_camera_single_image_unavailable_during_request(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
 
@@ -131,9 +131,9 @@ async def test_camera_single_image_unavailable_during_request(
     mock_client.request_single_image = _mock_camera_image
 
     client = await hass_client()
-    resp = await client.get("/api/camera_proxy/camera.test_my_camera")
+    resp = await client.get("/api/camera_proxy/camera.test_mycamera")
     await hass.async_block_till_done()
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
 
@@ -162,7 +162,7 @@ async def test_camera_stream(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
     remaining_responses = 3
@@ -178,9 +178,9 @@ async def test_camera_stream(
     mock_client.request_single_image = _mock_camera_image
 
     client = await hass_client()
-    resp = await client.get("/api/camera_proxy_stream/camera.test_my_camera")
+    resp = await client.get("/api/camera_proxy_stream/camera.test_mycamera")
     await hass.async_block_till_done()
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
 
@@ -218,16 +218,16 @@ async def test_camera_stream_unavailable(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
 
     await mock_device.mock_disconnect(False)
 
     client = await hass_client()
-    await client.get("/api/camera_proxy_stream/camera.test_my_camera")
+    await client.get("/api/camera_proxy_stream/camera.test_mycamera")
     await hass.async_block_till_done()
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
 
@@ -254,7 +254,7 @@ async def test_camera_stream_with_disconnection(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == CameraState.IDLE
     remaining_responses = 3
@@ -272,8 +272,8 @@ async def test_camera_stream_with_disconnection(
     mock_client.request_single_image = _mock_camera_image
 
     client = await hass_client()
-    await client.get("/api/camera_proxy_stream/camera.test_my_camera")
+    await client.get("/api/camera_proxy_stream/camera.test_mycamera")
     await hass.async_block_till_done()
-    state = hass.states.get("camera.test_my_camera")
+    state = hass.states.get("camera.test_mycamera")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
diff --git a/tests/components/esphome/test_climate.py b/tests/components/esphome/test_climate.py
index c574764e3c9..615d76977c4 100644
--- a/tests/components/esphome/test_climate.py
+++ b/tests/components/esphome/test_climate.py
@@ -82,14 +82,14 @@ async def test_climate_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.state == HVACMode.COOL
 
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_TEMPERATURE,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_TEMPERATURE: 25},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_TEMPERATURE: 25},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -137,7 +137,7 @@ async def test_climate_entity_with_step_and_two_point(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.state == HVACMode.COOL
 
@@ -145,7 +145,7 @@ async def test_climate_entity_with_step_and_two_point(
         await hass.services.async_call(
             CLIMATE_DOMAIN,
             SERVICE_SET_TEMPERATURE,
-            {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_TEMPERATURE: 25},
+            {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_TEMPERATURE: 25},
             blocking=True,
         )
 
@@ -153,7 +153,7 @@ async def test_climate_entity_with_step_and_two_point(
         CLIMATE_DOMAIN,
         SERVICE_SET_TEMPERATURE,
         {
-            ATTR_ENTITY_ID: "climate.test_my_climate",
+            ATTR_ENTITY_ID: "climate.test_myclimate",
             ATTR_HVAC_MODE: HVACMode.AUTO,
             ATTR_TARGET_TEMP_LOW: 20,
             ATTR_TARGET_TEMP_HIGH: 30,
@@ -217,7 +217,7 @@ async def test_climate_entity_with_step_and_target_temp(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.state == HVACMode.COOL
 
@@ -225,7 +225,7 @@ async def test_climate_entity_with_step_and_target_temp(
         CLIMATE_DOMAIN,
         SERVICE_SET_TEMPERATURE,
         {
-            ATTR_ENTITY_ID: "climate.test_my_climate",
+            ATTR_ENTITY_ID: "climate.test_myclimate",
             ATTR_HVAC_MODE: HVACMode.AUTO,
             ATTR_TEMPERATURE: 25,
         },
@@ -241,7 +241,7 @@ async def test_climate_entity_with_step_and_target_temp(
             CLIMATE_DOMAIN,
             SERVICE_SET_TEMPERATURE,
             {
-                ATTR_ENTITY_ID: "climate.test_my_climate",
+                ATTR_ENTITY_ID: "climate.test_myclimate",
                 ATTR_HVAC_MODE: HVACMode.AUTO,
                 ATTR_TARGET_TEMP_LOW: 20,
                 ATTR_TARGET_TEMP_HIGH: 30,
@@ -253,7 +253,7 @@ async def test_climate_entity_with_step_and_target_temp(
         CLIMATE_DOMAIN,
         SERVICE_SET_HVAC_MODE,
         {
-            ATTR_ENTITY_ID: "climate.test_my_climate",
+            ATTR_ENTITY_ID: "climate.test_myclimate",
             ATTR_HVAC_MODE: HVACMode.HEAT,
         },
         blocking=True,
@@ -272,7 +272,7 @@ async def test_climate_entity_with_step_and_target_temp(
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_PRESET_MODE,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_PRESET_MODE: "away"},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_PRESET_MODE: "away"},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -289,7 +289,7 @@ async def test_climate_entity_with_step_and_target_temp(
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_PRESET_MODE,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_PRESET_MODE: "preset1"},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_PRESET_MODE: "preset1"},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -300,7 +300,7 @@ async def test_climate_entity_with_step_and_target_temp(
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_FAN_MODE,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_FAN_MODE: FAN_HIGH},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_FAN_MODE: FAN_HIGH},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -311,7 +311,7 @@ async def test_climate_entity_with_step_and_target_temp(
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_FAN_MODE,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_FAN_MODE: "fan2"},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_FAN_MODE: "fan2"},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -322,7 +322,7 @@ async def test_climate_entity_with_step_and_target_temp(
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_SWING_MODE,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_SWING_MODE: SWING_BOTH},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_SWING_MODE: SWING_BOTH},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -373,7 +373,7 @@ async def test_climate_entity_with_humidity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.state == HVACMode.AUTO
     attributes = state.attributes
@@ -385,7 +385,7 @@ async def test_climate_entity_with_humidity(
     await hass.services.async_call(
         CLIMATE_DOMAIN,
         SERVICE_SET_HUMIDITY,
-        {ATTR_ENTITY_ID: "climate.test_my_climate", ATTR_HUMIDITY: 23},
+        {ATTR_ENTITY_ID: "climate.test_myclimate", ATTR_HUMIDITY: 23},
         blocking=True,
     )
     mock_client.climate_command.assert_has_calls(
@@ -436,7 +436,7 @@ async def test_climate_entity_with_inf_value(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.state == HVACMode.AUTO
     attributes = state.attributes
@@ -497,7 +497,7 @@ async def test_climate_entity_attributes(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.state == HVACMode.COOL
     assert state.attributes == snapshot(name="climate-entity-attributes")
@@ -530,6 +530,6 @@ async def test_climate_entity_attribute_current_temperature_unsupported(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("climate.test_my_climate")
+    state = hass.states.get("climate.test_myclimate")
     assert state is not None
     assert state.attributes[ATTR_CURRENT_TEMPERATURE] is None
diff --git a/tests/components/esphome/test_cover.py b/tests/components/esphome/test_cover.py
index d7b92e490fe..cf011e64b0c 100644
--- a/tests/components/esphome/test_cover.py
+++ b/tests/components/esphome/test_cover.py
@@ -61,7 +61,7 @@ async def test_cover_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("cover.test_my_cover")
+    state = hass.states.get("cover.test_mycover")
     assert state is not None
     assert state.state == CoverState.OPENING
     assert state.attributes[ATTR_CURRENT_POSITION] == 50
@@ -70,7 +70,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_CLOSE_COVER,
-        {ATTR_ENTITY_ID: "cover.test_my_cover"},
+        {ATTR_ENTITY_ID: "cover.test_mycover"},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, position=0.0, device_id=0)])
@@ -79,7 +79,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_OPEN_COVER,
-        {ATTR_ENTITY_ID: "cover.test_my_cover"},
+        {ATTR_ENTITY_ID: "cover.test_mycover"},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, position=1.0, device_id=0)])
@@ -88,7 +88,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_SET_COVER_POSITION,
-        {ATTR_ENTITY_ID: "cover.test_my_cover", ATTR_POSITION: 50},
+        {ATTR_ENTITY_ID: "cover.test_mycover", ATTR_POSITION: 50},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, position=0.5, device_id=0)])
@@ -97,7 +97,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_STOP_COVER,
-        {ATTR_ENTITY_ID: "cover.test_my_cover"},
+        {ATTR_ENTITY_ID: "cover.test_mycover"},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, stop=True, device_id=0)])
@@ -106,7 +106,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_OPEN_COVER_TILT,
-        {ATTR_ENTITY_ID: "cover.test_my_cover"},
+        {ATTR_ENTITY_ID: "cover.test_mycover"},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, tilt=1.0, device_id=0)])
@@ -115,7 +115,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_CLOSE_COVER_TILT,
-        {ATTR_ENTITY_ID: "cover.test_my_cover"},
+        {ATTR_ENTITY_ID: "cover.test_mycover"},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, tilt=0.0, device_id=0)])
@@ -124,7 +124,7 @@ async def test_cover_entity(
     await hass.services.async_call(
         COVER_DOMAIN,
         SERVICE_SET_COVER_TILT_POSITION,
-        {ATTR_ENTITY_ID: "cover.test_my_cover", ATTR_TILT_POSITION: 50},
+        {ATTR_ENTITY_ID: "cover.test_mycover", ATTR_TILT_POSITION: 50},
         blocking=True,
     )
     mock_client.cover_command.assert_has_calls([call(key=1, tilt=0.5, device_id=0)])
@@ -134,7 +134,7 @@ async def test_cover_entity(
         ESPHomeCoverState(key=1, position=0.0, current_operation=CoverOperation.IDLE)
     )
     await hass.async_block_till_done()
-    state = hass.states.get("cover.test_my_cover")
+    state = hass.states.get("cover.test_mycover")
     assert state is not None
     assert state.state == CoverState.CLOSED
 
@@ -144,7 +144,7 @@ async def test_cover_entity(
         )
     )
     await hass.async_block_till_done()
-    state = hass.states.get("cover.test_my_cover")
+    state = hass.states.get("cover.test_mycover")
     assert state is not None
     assert state.state == CoverState.CLOSING
 
@@ -152,7 +152,7 @@ async def test_cover_entity(
         ESPHomeCoverState(key=1, position=1.0, current_operation=CoverOperation.IDLE)
     )
     await hass.async_block_till_done()
-    state = hass.states.get("cover.test_my_cover")
+    state = hass.states.get("cover.test_mycover")
     assert state is not None
     assert state.state == CoverState.OPEN
 
@@ -188,7 +188,7 @@ async def test_cover_entity_without_position(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("cover.test_my_cover")
+    state = hass.states.get("cover.test_mycover")
     assert state is not None
     assert state.state == CoverState.OPENING
     assert ATTR_CURRENT_TILT_POSITION not in state.attributes
diff --git a/tests/components/esphome/test_date.py b/tests/components/esphome/test_date.py
index 9e555eb98c2..bd330c450bd 100644
--- a/tests/components/esphome/test_date.py
+++ b/tests/components/esphome/test_date.py
@@ -36,14 +36,14 @@ async def test_generic_date_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("date.test_my_date")
+    state = hass.states.get("date.test_mydate")
     assert state is not None
     assert state.state == "2024-12-31"
 
     await hass.services.async_call(
         DATE_DOMAIN,
         SERVICE_SET_VALUE,
-        {ATTR_ENTITY_ID: "date.test_my_date", ATTR_DATE: "1999-01-01"},
+        {ATTR_ENTITY_ID: "date.test_mydate", ATTR_DATE: "1999-01-01"},
         blocking=True,
     )
     mock_client.date_command.assert_has_calls([call(1, 1999, 1, 1, device_id=0)])
@@ -71,6 +71,6 @@ async def test_generic_date_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("date.test_my_date")
+    state = hass.states.get("date.test_mydate")
     assert state is not None
     assert state.state == STATE_UNKNOWN
diff --git a/tests/components/esphome/test_datetime.py b/tests/components/esphome/test_datetime.py
index 940fae5cfef..f752105e18b 100644
--- a/tests/components/esphome/test_datetime.py
+++ b/tests/components/esphome/test_datetime.py
@@ -36,7 +36,7 @@ async def test_generic_datetime_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("datetime.test_my_datetime")
+    state = hass.states.get("datetime.test_mydatetime")
     assert state is not None
     assert state.state == "2024-04-16T12:34:56+00:00"
 
@@ -44,7 +44,7 @@ async def test_generic_datetime_entity(
         DATETIME_DOMAIN,
         SERVICE_SET_VALUE,
         {
-            ATTR_ENTITY_ID: "datetime.test_my_datetime",
+            ATTR_ENTITY_ID: "datetime.test_mydatetime",
             ATTR_DATETIME: "2000-01-01T01:23:45+00:00",
         },
         blocking=True,
@@ -74,6 +74,6 @@ async def test_generic_datetime_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("datetime.test_my_datetime")
+    state = hass.states.get("datetime.test_mydatetime")
     assert state is not None
     assert state.state == STATE_UNKNOWN
diff --git a/tests/components/esphome/test_entity.py b/tests/components/esphome/test_entity.py
index 9b3c08bb77d..75cb1925b8e 100644
--- a/tests/components/esphome/test_entity.py
+++ b/tests/components/esphome/test_entity.py
@@ -70,10 +70,10 @@ async def test_entities_removed(
     entry = mock_device.entry
     entry_id = entry.entry_id
     storage_key = f"esphome.{entry_id}"
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     assert state.state == STATE_ON
 
@@ -82,13 +82,13 @@ async def test_entities_removed(
 
     assert len(hass_storage[storage_key]["data"]["binary_sensor"]) == 2
 
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.attributes[ATTR_RESTORED] is True
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is not None
     assert state.attributes[ATTR_RESTORED] is True
@@ -110,13 +110,13 @@ async def test_entities_removed(
         entry=entry,
     )
     assert mock_device.entry.entry_id == entry_id
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is None
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is None
     await hass.config_entries.async_unload(entry.entry_id)
@@ -156,15 +156,15 @@ async def test_entities_removed_after_reload(
     entry = mock_device.entry
     entry_id = entry.entry_id
     storage_key = f"esphome.{entry_id}"
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     assert state.state == STATE_ON
 
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is not None
 
@@ -173,15 +173,15 @@ async def test_entities_removed_after_reload(
 
     assert len(hass_storage[storage_key]["data"]["binary_sensor"]) == 2
 
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.attributes[ATTR_RESTORED] is True
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     assert state.attributes[ATTR_RESTORED] is True
 
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is not None
 
@@ -190,14 +190,14 @@ async def test_entities_removed_after_reload(
 
     assert len(hass_storage[storage_key]["data"]["binary_sensor"]) == 2
 
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert ATTR_RESTORED not in state.attributes
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     assert ATTR_RESTORED not in state.attributes
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is not None
 
@@ -224,23 +224,23 @@ async def test_entities_removed_after_reload(
             on_future.set_result(None)
 
     async_track_state_change_event(
-        hass, ["binary_sensor.test_my_binary_sensor"], _async_wait_for_on
+        hass, ["binary_sensor.test_mybinary_sensor"], _async_wait_for_on
     )
     await hass.async_block_till_done()
     async with asyncio.timeout(2):
         await on_future
 
     assert mock_device.entry.entry_id == entry_id
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is None
 
     await hass.async_block_till_done()
 
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is None
     assert await hass.config_entries.async_unload(entry.entry_id)
@@ -274,7 +274,7 @@ async def test_entities_for_entire_platform_removed(
     entry = mock_device.entry
     entry_id = entry.entry_id
     storage_key = f"esphome.{entry_id}"
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     assert state.state == STATE_ON
 
@@ -283,10 +283,10 @@ async def test_entities_for_entire_platform_removed(
 
     assert len(hass_storage[storage_key]["data"]["binary_sensor"]) == 1
 
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is not None
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is not None
     assert state.attributes[ATTR_RESTORED] is True
@@ -296,10 +296,10 @@ async def test_entities_for_entire_platform_removed(
         entry=entry,
     )
     assert mock_device.entry.entry_id == entry_id
-    state = hass.states.get("binary_sensor.test_my_binary_sensor_to_be_removed")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor_to_be_removed")
     assert state is None
     reg_entry = entity_registry.async_get(
-        "binary_sensor.test_my_binary_sensor_to_be_removed"
+        "binary_sensor.test_mybinary_sensor_to_be_removed"
     )
     assert reg_entry is None
     await hass.config_entries.async_unload(entry.entry_id)
@@ -326,7 +326,7 @@ async def test_entity_info_object_ids(
         entity_info=entity_info,
         states=states,
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_object_id_is_used")
     assert state is not None
 
 
@@ -344,7 +344,7 @@ async def test_deep_sleep_device(
             name="my binary_sensor",
         ),
         SensorInfo(
-            object_id="my_sensor",
+            object_id="mysensor",
             key=3,
             name="my sensor",
         ),
@@ -360,29 +360,29 @@ async def test_deep_sleep_device(
         states=states,
         device_info={"has_deep_sleep": True},
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "123.0"
 
     await mock_device.mock_disconnect(False)
     await hass.async_block_till_done()
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
 
     await mock_device.mock_connect()
     await hass.async_block_till_done()
 
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "123.0"
 
@@ -393,19 +393,19 @@ async def test_deep_sleep_device(
     mock_device.set_state(BinarySensorState(key=1, state=False, missing_state=False))
     mock_device.set_state(SensorState(key=3, state=56, missing_state=False))
     await hass.async_block_till_done()
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_OFF
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "56"
 
     await mock_device.mock_disconnect(True)
     await hass.async_block_till_done()
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_OFF
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "56"
 
@@ -413,23 +413,23 @@ async def test_deep_sleep_device(
     await hass.async_block_till_done()
     await mock_device.mock_disconnect(False)
     await hass.async_block_till_done()
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == STATE_UNAVAILABLE
 
     await mock_device.mock_connect()
     await hass.async_block_till_done()
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
     hass.bus.async_fire(EVENT_HOMEASSISTANT_STOP)
     await hass.async_block_till_done()
     # Verify we do not dispatch any more state updates or
     # availability updates after the stop event is fired
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
 
@@ -458,7 +458,7 @@ async def test_esphome_device_without_friendly_name(
         states=states,
         device_info={"friendly_name": None},
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
 
@@ -865,7 +865,7 @@ async def test_entity_friendly_names_with_empty_device_names(
 
     # Check entity friendly name on sub-device with empty name
     # Since sub device has empty name, it falls back to main device name "test"
-    state_1 = hass.states.get("binary_sensor.test_motion_detected")
+    state_1 = hass.states.get("binary_sensor.test_motion")
     assert state_1 is not None
     # With has_entity_name, friendly name is "{device_name} {entity_name}"
     # Since sub-device falls back to main device name: "Main Device Motion Detected"
@@ -934,7 +934,7 @@ async def test_entity_switches_between_devices(
     )
     assert main_device is not None
 
-    sensor_entity = entity_registry.async_get("binary_sensor.test_test_sensor")
+    sensor_entity = entity_registry.async_get("binary_sensor.test_sensor")
     assert sensor_entity is not None
     assert sensor_entity.device_id == main_device.id
 
@@ -962,7 +962,7 @@ async def test_entity_switches_between_devices(
     )
     assert sub_device_1 is not None
 
-    sensor_entity = entity_registry.async_get("binary_sensor.test_test_sensor")
+    sensor_entity = entity_registry.async_get("binary_sensor.test_sensor")
     assert sensor_entity is not None
     assert sensor_entity.device_id == sub_device_1.id
 
@@ -988,7 +988,7 @@ async def test_entity_switches_between_devices(
     )
     assert sub_device_2 is not None
 
-    sensor_entity = entity_registry.async_get("binary_sensor.test_test_sensor")
+    sensor_entity = entity_registry.async_get("binary_sensor.test_sensor")
     assert sensor_entity is not None
     assert sensor_entity.device_id == sub_device_2.id
 
@@ -1009,7 +1009,7 @@ async def test_entity_switches_between_devices(
     await device.mock_connect()
 
     # Verify entity is back on main device
-    sensor_entity = entity_registry.async_get("binary_sensor.test_test_sensor")
+    sensor_entity = entity_registry.async_get("binary_sensor.test_sensor")
     assert sensor_entity is not None
     assert sensor_entity.device_id == main_device.id
 
@@ -1578,6 +1578,7 @@ async def test_entity_device_id_rename_in_yaml(
         ("τιμή αισθητήρα", "binary_sensor.test_time_aisthetera"),
     ],
 )
+@pytest.mark.skip(reason="moot")
 async def test_entity_with_unicode_name(
     hass: HomeAssistant,
     mock_client: APIClient,
diff --git a/tests/components/esphome/test_event.py b/tests/components/esphome/test_event.py
index 3cff3184bf1..55a811d3caa 100644
--- a/tests/components/esphome/test_event.py
+++ b/tests/components/esphome/test_event.py
@@ -35,7 +35,7 @@ async def test_generic_event_entity(
     await hass.async_block_till_done()
 
     # Test initial state
-    state = hass.states.get("event.test_my_event")
+    state = hass.states.get("event.test_myevent")
     assert state is not None
     assert state.state == "2024-04-24T00:00:00.000+00:00"
     assert state.attributes["event_type"] == "type1"
@@ -43,7 +43,7 @@ async def test_generic_event_entity(
     # Test device becomes unavailable
     await device.mock_disconnect(True)
     await hass.async_block_till_done()
-    state = hass.states.get("event.test_my_event")
+    state = hass.states.get("event.test_myevent")
     assert state.state == STATE_UNAVAILABLE
 
     # Test device becomes available again
@@ -51,6 +51,6 @@ async def test_generic_event_entity(
     await hass.async_block_till_done()
 
     # Event entity should be available immediately without waiting for data
-    state = hass.states.get("event.test_my_event")
+    state = hass.states.get("event.test_myevent")
     assert state.state == "2024-04-24T00:00:00.000+00:00"
     assert state.attributes["event_type"] == "type1"
diff --git a/tests/components/esphome/test_fan.py b/tests/components/esphome/test_fan.py
index 763e95d3e6f..b2aff4d45d7 100644
--- a/tests/components/esphome/test_fan.py
+++ b/tests/components/esphome/test_fan.py
@@ -65,14 +65,14 @@ async def test_fan_entity_with_all_features_old_api(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("fan.test_my_fan")
+    state = hass.states.get("fan.test_myfan")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 20},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 20},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -83,7 +83,7 @@ async def test_fan_entity_with_all_features_old_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 50},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 50},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -94,7 +94,7 @@ async def test_fan_entity_with_all_features_old_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_DECREASE_SPEED,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -105,7 +105,7 @@ async def test_fan_entity_with_all_features_old_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_INCREASE_SPEED,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -116,7 +116,7 @@ async def test_fan_entity_with_all_features_old_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -125,7 +125,7 @@ async def test_fan_entity_with_all_features_old_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_SET_PERCENTAGE,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 100},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 100},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -170,14 +170,14 @@ async def test_fan_entity_with_all_features_new_api(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("fan.test_my_fan")
+    state = hass.states.get("fan.test_myfan")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 20},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 20},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -188,7 +188,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 50},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 50},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -199,7 +199,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_DECREASE_SPEED,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -210,7 +210,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_INCREASE_SPEED,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -221,7 +221,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -230,7 +230,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_SET_PERCENTAGE,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 100},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 100},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -241,7 +241,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_SET_PERCENTAGE,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PERCENTAGE: 0},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PERCENTAGE: 0},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -250,7 +250,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_OSCILLATE,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_OSCILLATING: True},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_OSCILLATING: True},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -261,7 +261,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_OSCILLATE,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_OSCILLATING: False},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_OSCILLATING: False},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -272,7 +272,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_SET_DIRECTION,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_DIRECTION: "forward"},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_DIRECTION: "forward"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -283,7 +283,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_SET_DIRECTION,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_DIRECTION: "reverse"},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_DIRECTION: "reverse"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -294,7 +294,7 @@ async def test_fan_entity_with_all_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_SET_PRESET_MODE,
-        {ATTR_ENTITY_ID: "fan.test_my_fan", ATTR_PRESET_MODE: "Preset1"},
+        {ATTR_ENTITY_ID: "fan.test_myfan", ATTR_PRESET_MODE: "Preset1"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls(
@@ -329,14 +329,14 @@ async def test_fan_entity_with_no_features_new_api(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("fan.test_my_fan")
+    state = hass.states.get("fan.test_myfan")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls([call(key=1, state=True, device_id=0)])
@@ -345,7 +345,7 @@ async def test_fan_entity_with_no_features_new_api(
     await hass.services.async_call(
         FAN_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "fan.test_my_fan"},
+        {ATTR_ENTITY_ID: "fan.test_myfan"},
         blocking=True,
     )
     mock_client.fan_command.assert_has_calls([call(key=1, state=False, device_id=0)])
diff --git a/tests/components/esphome/test_light.py b/tests/components/esphome/test_light.py
index bf602a6fa84..f48f5181128 100644
--- a/tests/components/esphome/test_light.py
+++ b/tests/components/esphome/test_light.py
@@ -69,14 +69,14 @@ async def test_light_on_off(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -110,14 +110,14 @@ async def test_light_brightness(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -135,7 +135,7 @@ async def test_light_brightness(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -154,7 +154,7 @@ async def test_light_brightness(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_TRANSITION: 2},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_TRANSITION: 2},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -165,7 +165,7 @@ async def test_light_brightness(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_FLASH: FLASH_LONG},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_FLASH: FLASH_LONG},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -176,7 +176,7 @@ async def test_light_brightness(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_TRANSITION: 2},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_TRANSITION: 2},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -195,7 +195,7 @@ async def test_light_brightness(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_FLASH: FLASH_SHORT},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_FLASH: FLASH_SHORT},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -241,7 +241,7 @@ async def test_light_legacy_brightness(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [
@@ -251,7 +251,7 @@ async def test_light_legacy_brightness(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -296,7 +296,7 @@ async def test_light_brightness_on_off(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [
@@ -307,7 +307,7 @@ async def test_light_brightness_on_off(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -325,7 +325,7 @@ async def test_light_brightness_on_off(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -371,14 +371,14 @@ async def test_light_legacy_white_converted_to_brightness(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -431,7 +431,7 @@ async def test_light_legacy_white_with_rgb(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [
@@ -442,7 +442,7 @@ async def test_light_legacy_white_with_rgb(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_WHITE: 60},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_WHITE: 60},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -494,14 +494,14 @@ async def test_light_brightness_on_off_with_unknown_color_mode(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -519,7 +519,7 @@ async def test_light_brightness_on_off_with_unknown_color_mode(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -564,14 +564,14 @@ async def test_light_on_and_brightness(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -616,14 +616,14 @@ async def test_rgb_color_temp_light(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -641,7 +641,7 @@ async def test_rgb_color_temp_light(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -660,7 +660,7 @@ async def test_rgb_color_temp_light(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_COLOR_TEMP_KELVIN: 2500},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_COLOR_TEMP_KELVIN: 2500},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -704,14 +704,14 @@ async def test_light_rgb(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -731,7 +731,7 @@ async def test_light_rgb(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -753,7 +753,7 @@ async def test_light_rgb(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
         {
-            ATTR_ENTITY_ID: "light.test_my_light",
+            ATTR_ENTITY_ID: "light.test_mylight",
             ATTR_BRIGHTNESS: 127,
             ATTR_HS_COLOR: (100, 100),
         },
@@ -779,7 +779,7 @@ async def test_light_rgb(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGB_COLOR: (255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGB_COLOR: (255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -841,7 +841,7 @@ async def test_light_rgbw(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [ColorMode.RGBW]
@@ -850,7 +850,7 @@ async def test_light_rgbw(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -871,7 +871,7 @@ async def test_light_rgbw(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -894,7 +894,7 @@ async def test_light_rgbw(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
         {
-            ATTR_ENTITY_ID: "light.test_my_light",
+            ATTR_ENTITY_ID: "light.test_mylight",
             ATTR_BRIGHTNESS: 127,
             ATTR_HS_COLOR: (100, 100),
         },
@@ -922,7 +922,7 @@ async def test_light_rgbw(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGB_COLOR: (255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGB_COLOR: (255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -946,7 +946,7 @@ async def test_light_rgbw(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGBW_COLOR: (255, 255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGBW_COLOR: (255, 255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1015,7 +1015,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [
@@ -1031,7 +1031,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1049,7 +1049,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1069,7 +1069,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
         {
-            ATTR_ENTITY_ID: "light.test_my_light",
+            ATTR_ENTITY_ID: "light.test_mylight",
             ATTR_BRIGHTNESS: 127,
             ATTR_HS_COLOR: (100, 100),
         },
@@ -1093,7 +1093,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGB_COLOR: (255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGB_COLOR: (255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1113,7 +1113,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGBW_COLOR: (255, 255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGBW_COLOR: (255, 255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1135,7 +1135,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
         {
-            ATTR_ENTITY_ID: "light.test_my_light",
+            ATTR_ENTITY_ID: "light.test_mylight",
             ATTR_RGBWW_COLOR: (255, 255, 255, 255, 255),
         },
         blocking=True,
@@ -1159,7 +1159,7 @@ async def test_light_rgbww_with_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_COLOR_TEMP_KELVIN: 2500},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_COLOR_TEMP_KELVIN: 2500},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1223,7 +1223,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [ColorMode.RGBWW]
@@ -1233,7 +1233,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1255,7 +1255,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1279,7 +1279,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
         {
-            ATTR_ENTITY_ID: "light.test_my_light",
+            ATTR_ENTITY_ID: "light.test_mylight",
             ATTR_BRIGHTNESS: 127,
             ATTR_HS_COLOR: (100, 100),
         },
@@ -1309,7 +1309,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGB_COLOR: (255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGB_COLOR: (255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1335,7 +1335,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGBW_COLOR: (255, 255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGBW_COLOR: (255, 255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1362,7 +1362,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
         {
-            ATTR_ENTITY_ID: "light.test_my_light",
+            ATTR_ENTITY_ID: "light.test_mylight",
             ATTR_RGBWW_COLOR: (255, 255, 255, 255, 255),
         },
         blocking=True,
@@ -1390,7 +1390,7 @@ async def test_light_rgbww_without_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_COLOR_TEMP_KELVIN: 2500},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_COLOR_TEMP_KELVIN: 2500},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1451,7 +1451,7 @@ async def test_light_color_temp(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     attributes = state.attributes
@@ -1461,7 +1461,7 @@ async def test_light_color_temp(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1481,7 +1481,7 @@ async def test_light_color_temp(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -1525,7 +1525,7 @@ async def test_light_color_temp_no_mireds_set(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     attributes = state.attributes
@@ -1535,7 +1535,7 @@ async def test_light_color_temp_no_mireds_set(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1555,7 +1555,7 @@ async def test_light_color_temp_no_mireds_set(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_COLOR_TEMP_KELVIN: 6000},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_COLOR_TEMP_KELVIN: 6000},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1576,7 +1576,7 @@ async def test_light_color_temp_no_mireds_set(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -1627,7 +1627,7 @@ async def test_light_color_temp_legacy(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     attributes = state.attributes
@@ -1640,7 +1640,7 @@ async def test_light_color_temp_legacy(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1660,7 +1660,7 @@ async def test_light_color_temp_legacy(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -1713,7 +1713,7 @@ async def test_light_rgb_legacy(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     attributes = state.attributes
@@ -1723,7 +1723,7 @@ async def test_light_rgb_legacy(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1740,7 +1740,7 @@ async def test_light_rgb_legacy(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls([call(key=1, state=False, device_id=0)])
@@ -1749,7 +1749,7 @@ async def test_light_rgb_legacy(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_RGB_COLOR: (255, 255, 255)},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_RGB_COLOR: (255, 255, 255)},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1799,7 +1799,7 @@ async def test_light_effects(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_EFFECT_LIST] == ["effect1", "effect2"]
@@ -1807,7 +1807,7 @@ async def test_light_effects(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_EFFECT: "effect1"},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_EFFECT: "effect1"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1867,7 +1867,7 @@ async def test_only_cold_warm_white_support(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [ColorMode.COLOR_TEMP]
@@ -1876,7 +1876,7 @@ async def test_only_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1887,7 +1887,7 @@ async def test_only_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_BRIGHTNESS: 127},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_BRIGHTNESS: 127},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1906,7 +1906,7 @@ async def test_only_cold_warm_white_support(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light", ATTR_COLOR_TEMP_KELVIN: 2500},
+        {ATTR_ENTITY_ID: "light.test_mylight", ATTR_COLOR_TEMP_KELVIN: 2500},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
@@ -1949,7 +1949,7 @@ async def test_light_no_color_modes(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("light.test_my_light")
+    state = hass.states.get("light.test_mylight")
     assert state is not None
     assert state.state == STATE_ON
     assert state.attributes[ATTR_SUPPORTED_COLOR_MODES] == [ColorMode.ONOFF]
@@ -1957,7 +1957,7 @@ async def test_light_no_color_modes(
     await hass.services.async_call(
         LIGHT_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "light.test_my_light"},
+        {ATTR_ENTITY_ID: "light.test_mylight"},
         blocking=True,
     )
     mock_client.light_command.assert_has_calls(
diff --git a/tests/components/esphome/test_lock.py b/tests/components/esphome/test_lock.py
index 93e9c0704c3..09790b8c703 100644
--- a/tests/components/esphome/test_lock.py
+++ b/tests/components/esphome/test_lock.py
@@ -46,14 +46,14 @@ async def test_lock_entity_no_open(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("lock.test_my_lock")
+    state = hass.states.get("lock.test_mylock")
     assert state is not None
     assert state.state == LockState.UNLOCKING
 
     await hass.services.async_call(
         LOCK_DOMAIN,
         SERVICE_LOCK,
-        {ATTR_ENTITY_ID: "lock.test_my_lock"},
+        {ATTR_ENTITY_ID: "lock.test_mylock"},
         blocking=True,
     )
     mock_client.lock_command.assert_has_calls([call(1, LockCommand.LOCK, device_id=0)])
@@ -81,7 +81,7 @@ async def test_lock_entity_start_locked(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("lock.test_my_lock")
+    state = hass.states.get("lock.test_mylock")
     assert state is not None
     assert state.state == LockState.LOCKED
 
@@ -109,14 +109,14 @@ async def test_lock_entity_supports_open(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("lock.test_my_lock")
+    state = hass.states.get("lock.test_mylock")
     assert state is not None
     assert state.state == LockState.LOCKING
 
     await hass.services.async_call(
         LOCK_DOMAIN,
         SERVICE_LOCK,
-        {ATTR_ENTITY_ID: "lock.test_my_lock"},
+        {ATTR_ENTITY_ID: "lock.test_mylock"},
         blocking=True,
     )
     mock_client.lock_command.assert_has_calls([call(1, LockCommand.LOCK, device_id=0)])
@@ -125,7 +125,7 @@ async def test_lock_entity_supports_open(
     await hass.services.async_call(
         LOCK_DOMAIN,
         SERVICE_UNLOCK,
-        {ATTR_ENTITY_ID: "lock.test_my_lock"},
+        {ATTR_ENTITY_ID: "lock.test_mylock"},
         blocking=True,
     )
     mock_client.lock_command.assert_has_calls(
@@ -136,7 +136,7 @@ async def test_lock_entity_supports_open(
     await hass.services.async_call(
         LOCK_DOMAIN,
         SERVICE_OPEN,
-        {ATTR_ENTITY_ID: "lock.test_my_lock"},
+        {ATTR_ENTITY_ID: "lock.test_mylock"},
         blocking=True,
     )
     mock_client.lock_command.assert_has_calls([call(1, LockCommand.OPEN, device_id=0)])
diff --git a/tests/components/esphome/test_manager.py b/tests/components/esphome/test_manager.py
index fec957a9560..36e2f78bec0 100644
--- a/tests/components/esphome/test_manager.py
+++ b/tests/components/esphome/test_manager.py
@@ -1466,10 +1466,6 @@ async def test_device_adds_friendly_name(
         connections={(dr.CONNECTION_NETWORK_MAC, device.entry.unique_id)}
     )
     assert dev.name == "Nofriendlyname"
-    assert (
-        "No `friendly_name` set in the `esphome:` section of "
-        "the YAML config for device 'nofriendlyname'"
-    ) in caplog.text
     caplog.clear()
 
     await device.mock_disconnect(True)
diff --git a/tests/components/esphome/test_media_player.py b/tests/components/esphome/test_media_player.py
index 232f7e1f06e..d8dad419285 100644
--- a/tests/components/esphome/test_media_player.py
+++ b/tests/components/esphome/test_media_player.py
@@ -70,7 +70,7 @@ async def test_media_player_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("media_player.test_my_media_player")
+    state = hass.states.get("media_player.test_mymedia_player")
     assert state is not None
     assert state.state == "paused"
 
@@ -78,7 +78,7 @@ async def test_media_player_entity(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_VOLUME_MUTE,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
             ATTR_MEDIA_VOLUME_MUTED: True,
         },
         blocking=True,
@@ -92,7 +92,7 @@ async def test_media_player_entity(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_VOLUME_MUTE,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
             ATTR_MEDIA_VOLUME_MUTED: True,
         },
         blocking=True,
@@ -106,7 +106,7 @@ async def test_media_player_entity(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_VOLUME_SET,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
             ATTR_MEDIA_VOLUME_LEVEL: 0.5,
         },
         blocking=True,
@@ -120,7 +120,7 @@ async def test_media_player_entity(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_MEDIA_PAUSE,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
         },
         blocking=True,
     )
@@ -133,7 +133,7 @@ async def test_media_player_entity(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_MEDIA_PLAY,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
         },
         blocking=True,
     )
@@ -146,7 +146,7 @@ async def test_media_player_entity(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_MEDIA_STOP,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
         },
         blocking=True,
     )
@@ -216,7 +216,7 @@ async def test_media_player_entity_with_source(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("media_player.test_my_media_player")
+    state = hass.states.get("media_player.test_mymedia_player")
     assert state is not None
     assert state.state == "playing"
 
@@ -225,7 +225,7 @@ async def test_media_player_entity_with_source(
             MEDIA_PLAYER_DOMAIN,
             SERVICE_PLAY_MEDIA,
             {
-                ATTR_ENTITY_ID: "media_player.test_my_media_player",
+                ATTR_ENTITY_ID: "media_player.test_mymedia_player",
                 ATTR_MEDIA_CONTENT_TYPE: MediaType.MUSIC,
                 ATTR_MEDIA_CONTENT_ID: "media-source://local/xz",
             },
@@ -249,7 +249,7 @@ async def test_media_player_entity_with_source(
             MEDIA_PLAYER_DOMAIN,
             SERVICE_PLAY_MEDIA,
             {
-                ATTR_ENTITY_ID: "media_player.test_my_media_player",
+                ATTR_ENTITY_ID: "media_player.test_mymedia_player",
                 ATTR_MEDIA_CONTENT_TYPE: "audio/mp3",
                 ATTR_MEDIA_CONTENT_ID: "media-source://local/xy",
             },
@@ -272,7 +272,7 @@ async def test_media_player_entity_with_source(
         {
             "id": 1,
             "type": "media_player/browse_media",
-            "entity_id": "media_player.test_my_media_player",
+            "entity_id": "media_player.test_mymedia_player",
         }
     )
     response = await client.receive_json()
@@ -282,7 +282,7 @@ async def test_media_player_entity_with_source(
         MEDIA_PLAYER_DOMAIN,
         SERVICE_PLAY_MEDIA,
         {
-            ATTR_ENTITY_ID: "media_player.test_my_media_player",
+            ATTR_ENTITY_ID: "media_player.test_mymedia_player",
             ATTR_MEDIA_CONTENT_TYPE: MediaType.URL,
             ATTR_MEDIA_CONTENT_ID: "media-source://tts?message=hello",
             ATTR_MEDIA_ANNOUNCE: True,
@@ -352,7 +352,7 @@ async def test_media_player_proxy(
         connections={(dr.CONNECTION_NETWORK_MAC, mock_device.entry.unique_id)}
     )
     assert dev is not None
-    state = hass.states.get("media_player.test_my_media_player")
+    state = hass.states.get("media_player.test_mymedia_player")
     assert state is not None
     assert state.state == "paused"
 
@@ -369,7 +369,7 @@ async def test_media_player_proxy(
             MEDIA_PLAYER_DOMAIN,
             SERVICE_PLAY_MEDIA,
             {
-                ATTR_ENTITY_ID: "media_player.test_my_media_player",
+                ATTR_ENTITY_ID: "media_player.test_mymedia_player",
                 ATTR_MEDIA_CONTENT_TYPE: MediaType.MUSIC,
                 ATTR_MEDIA_CONTENT_ID: media_url,
             },
@@ -400,7 +400,7 @@ async def test_media_player_proxy(
             MEDIA_PLAYER_DOMAIN,
             SERVICE_PLAY_MEDIA,
             {
-                ATTR_ENTITY_ID: "media_player.test_my_media_player",
+                ATTR_ENTITY_ID: "media_player.test_mymedia_player",
                 ATTR_MEDIA_CONTENT_TYPE: MediaType.MUSIC,
                 ATTR_MEDIA_CONTENT_ID: media_url,
                 ATTR_MEDIA_ANNOUNCE: True,
@@ -430,7 +430,7 @@ async def test_media_player_proxy(
             MEDIA_PLAYER_DOMAIN,
             SERVICE_PLAY_MEDIA,
             {
-                ATTR_ENTITY_ID: "media_player.test_my_media_player",
+                ATTR_ENTITY_ID: "media_player.test_mymedia_player",
                 ATTR_MEDIA_CONTENT_TYPE: MediaType.MUSIC,
                 ATTR_MEDIA_CONTENT_ID: media_url,
                 ATTR_MEDIA_EXTRA: {
diff --git a/tests/components/esphome/test_number.py b/tests/components/esphome/test_number.py
index 02b58649fec..b0ef353086c 100644
--- a/tests/components/esphome/test_number.py
+++ b/tests/components/esphome/test_number.py
@@ -49,14 +49,14 @@ async def test_generic_number_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("number.test_my_number")
+    state = hass.states.get("number.test_mynumber")
     assert state is not None
     assert state.state == "50"
 
     await hass.services.async_call(
         NUMBER_DOMAIN,
         SERVICE_SET_VALUE,
-        {ATTR_ENTITY_ID: "number.test_my_number", ATTR_VALUE: 50},
+        {ATTR_ENTITY_ID: "number.test_mynumber", ATTR_VALUE: 50},
         blocking=True,
     )
     mock_client.number_command.assert_has_calls([call(1, 50, device_id=0)])
@@ -89,7 +89,7 @@ async def test_generic_number_nan(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("number.test_my_number")
+    state = hass.states.get("number.test_mynumber")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -120,7 +120,7 @@ async def test_generic_number_with_unit_of_measurement_as_empty_string(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("number.test_my_number")
+    state = hass.states.get("number.test_mynumber")
     assert state is not None
     assert state.state == "42"
     assert ATTR_UNIT_OF_MEASUREMENT not in state.attributes
@@ -158,7 +158,7 @@ async def test_generic_number_entity_set_when_disconnected(
         await hass.services.async_call(
             NUMBER_DOMAIN,
             SERVICE_SET_VALUE,
-            {ATTR_ENTITY_ID: "number.test_my_number", ATTR_VALUE: 20},
+            {ATTR_ENTITY_ID: "number.test_mynumber", ATTR_VALUE: 20},
             blocking=True,
         )
     mock_client.number_command.reset_mock()
diff --git a/tests/components/esphome/test_repairs.py b/tests/components/esphome/test_repairs.py
index f5142367432..c97c067fb94 100644
--- a/tests/components/esphome/test_repairs.py
+++ b/tests/components/esphome/test_repairs.py
@@ -144,12 +144,12 @@ async def test_device_conflict_migration(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("binary_sensor.test_my_binary_sensor")
+    state = hass.states.get("binary_sensor.test_mybinary_sensor")
     assert state is not None
     assert state.state == STATE_ON
     mock_config_entry = device.entry
 
-    ent_reg_entry = entity_registry.async_get("binary_sensor.test_my_binary_sensor")
+    ent_reg_entry = entity_registry.async_get("binary_sensor.test_mybinary_sensor")
     assert ent_reg_entry
     assert ent_reg_entry.unique_id == "11:22:33:44:55:AA-binary_sensor-mybinary_sensor"
     entries = er.async_entries_for_config_entry(
@@ -221,7 +221,7 @@ async def test_device_conflict_migration(
     assert issue_registry.async_get_issue(DOMAIN, issue_id) is None
 
     assert mock_config_entry.unique_id == "11:22:33:44:55:ab"
-    ent_reg_entry = entity_registry.async_get("binary_sensor.test_my_binary_sensor")
+    ent_reg_entry = entity_registry.async_get("binary_sensor.test_mybinary_sensor")
     assert ent_reg_entry
     assert ent_reg_entry.unique_id == "11:22:33:44:55:AB-binary_sensor-mybinary_sensor"
 
diff --git a/tests/components/esphome/test_select.py b/tests/components/esphome/test_select.py
index 14673f5ffb9..7c16b79205f 100644
--- a/tests/components/esphome/test_select.py
+++ b/tests/components/esphome/test_select.py
@@ -78,14 +78,14 @@ async def test_select_generic_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("select.test_my_select")
+    state = hass.states.get("select.test_myselect")
     assert state is not None
     assert state.state == "a"
 
     await hass.services.async_call(
         SELECT_DOMAIN,
         SERVICE_SELECT_OPTION,
-        {ATTR_ENTITY_ID: "select.test_my_select", ATTR_OPTION: "b"},
+        {ATTR_ENTITY_ID: "select.test_myselect", ATTR_OPTION: "b"},
         blocking=True,
     )
     mock_client.select_command.assert_has_calls([call(1, "b", device_id=0)])
diff --git a/tests/components/esphome/test_sensor.py b/tests/components/esphome/test_sensor.py
index 6d3d59b9b4a..91981cff362 100644
--- a/tests/components/esphome/test_sensor.py
+++ b/tests/components/esphome/test_sensor.py
@@ -64,35 +64,35 @@ async def test_generic_numeric_sensor(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "50"
 
     # Test updating state
     mock_device.set_state(SensorState(key=1, state=60))
     await hass.async_block_till_done()
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "60"
 
     # Test sending the same state again
     mock_device.set_state(SensorState(key=1, state=60))
     await hass.async_block_till_done()
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "60"
 
     # Test we can still update after the same state
     mock_device.set_state(SensorState(key=1, state=70))
     await hass.async_block_till_done()
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "70"
 
     # Test invalid data from the underlying api does not crash us
     mock_device.set_state(SensorState(key=1, state=object()))
     await hass.async_block_till_done()
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "70"
 
@@ -121,11 +121,11 @@ async def test_generic_numeric_sensor_with_entity_category_and_icon(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "50"
     assert state.attributes[ATTR_ICON] == "mdi:leaf"
-    entry = entity_registry.async_get("sensor.test_my_sensor")
+    entry = entity_registry.async_get("sensor.test_mysensor")
     assert entry is not None
     # Note that ESPHome includes the EntityInfo type in the unique id
     # as this is not a 1:1 mapping to the entity platform (ie. text_sensor)
@@ -158,11 +158,11 @@ async def test_generic_numeric_sensor_state_class_measurement(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "50"
     assert state.attributes[ATTR_STATE_CLASS] == SensorStateClass.MEASUREMENT
-    entry = entity_registry.async_get("sensor.test_my_sensor")
+    entry = entity_registry.async_get("sensor.test_mysensor")
     assert entry is not None
     # Note that ESPHome includes the EntityInfo type in the unique id
     # as this is not a 1:1 mapping to the entity platform (ie. text_sensor)
@@ -192,7 +192,7 @@ async def test_generic_numeric_sensor_device_class_timestamp(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "2023-06-22T18:43:52+00:00"
 
@@ -220,7 +220,7 @@ async def test_generic_numeric_sensor_legacy_last_reset_convert(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "50"
     assert state.attributes[ATTR_STATE_CLASS] == SensorStateClass.TOTAL_INCREASING
@@ -247,7 +247,7 @@ async def test_generic_numeric_sensor_no_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -273,7 +273,7 @@ async def test_generic_numeric_sensor_nan_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -299,7 +299,7 @@ async def test_generic_numeric_sensor_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -325,7 +325,7 @@ async def test_generic_text_sensor(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "i am a teapot"
 
@@ -351,7 +351,7 @@ async def test_generic_text_sensor_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -378,7 +378,7 @@ async def test_generic_text_sensor_device_class_timestamp(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "2023-06-22T18:43:52+00:00"
     assert state.attributes[ATTR_DEVICE_CLASS] == SensorDeviceClass.TIMESTAMP
@@ -406,7 +406,7 @@ async def test_generic_text_sensor_device_class_date(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "2023-06-22"
     assert state.attributes[ATTR_DEVICE_CLASS] == SensorDeviceClass.DATE
@@ -434,7 +434,7 @@ async def test_generic_numeric_sensor_empty_string_uom(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert state.state == "123"
     assert ATTR_UNIT_OF_MEASUREMENT not in state.attributes
@@ -492,8 +492,8 @@ async def test_suggested_display_precision_by_device_class(
         states=states,
     )
 
-    state = hass.states.get("sensor.test_my_sensor")
+    state = hass.states.get("sensor.test_mysensor")
     assert state is not None
     assert float(
-        async_rounded_state(hass, "sensor.test_my_sensor", state)
+        async_rounded_state(hass, "sensor.test_mysensor", state)
     ) == pytest.approx(round(state_value, expected_precision))
diff --git a/tests/components/esphome/test_switch.py b/tests/components/esphome/test_switch.py
index 2d054a7317d..b3238445bb5 100644
--- a/tests/components/esphome/test_switch.py
+++ b/tests/components/esphome/test_switch.py
@@ -36,14 +36,14 @@ async def test_switch_generic_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("switch.test_my_switch")
+    state = hass.states.get("switch.test_myswitch")
     assert state is not None
     assert state.state == STATE_ON
 
     await hass.services.async_call(
         SWITCH_DOMAIN,
         SERVICE_TURN_ON,
-        {ATTR_ENTITY_ID: "switch.test_my_switch"},
+        {ATTR_ENTITY_ID: "switch.test_myswitch"},
         blocking=True,
     )
     mock_client.switch_command.assert_has_calls([call(1, True, device_id=0)])
@@ -51,7 +51,7 @@ async def test_switch_generic_entity(
     await hass.services.async_call(
         SWITCH_DOMAIN,
         SERVICE_TURN_OFF,
-        {ATTR_ENTITY_ID: "switch.test_my_switch"},
+        {ATTR_ENTITY_ID: "switch.test_myswitch"},
         blocking=True,
     )
     mock_client.switch_command.assert_has_calls([call(1, False, device_id=0)])
diff --git a/tests/components/esphome/test_text.py b/tests/components/esphome/test_text.py
index b1e84544e3e..e1c576be61f 100644
--- a/tests/components/esphome/test_text.py
+++ b/tests/components/esphome/test_text.py
@@ -40,14 +40,14 @@ async def test_generic_text_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("text.test_my_text")
+    state = hass.states.get("text.test_mytext")
     assert state is not None
     assert state.state == "hello world"
 
     await hass.services.async_call(
         TEXT_DOMAIN,
         SERVICE_SET_VALUE,
-        {ATTR_ENTITY_ID: "text.test_my_text", ATTR_VALUE: "goodbye"},
+        {ATTR_ENTITY_ID: "text.test_mytext", ATTR_VALUE: "goodbye"},
         blocking=True,
     )
     mock_client.text_command.assert_has_calls([call(1, "goodbye", device_id=0)])
@@ -79,7 +79,7 @@ async def test_generic_text_entity_no_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("text.test_my_text")
+    state = hass.states.get("text.test_mytext")
     assert state is not None
     assert state.state == STATE_UNKNOWN
 
@@ -109,6 +109,6 @@ async def test_generic_text_entity_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("text.test_my_text")
+    state = hass.states.get("text.test_mytext")
     assert state is not None
     assert state.state == STATE_UNKNOWN
diff --git a/tests/components/esphome/test_time.py b/tests/components/esphome/test_time.py
index 176510d4e65..812faeeb2c1 100644
--- a/tests/components/esphome/test_time.py
+++ b/tests/components/esphome/test_time.py
@@ -36,14 +36,14 @@ async def test_generic_time_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("time.test_my_time")
+    state = hass.states.get("time.test_mytime")
     assert state is not None
     assert state.state == "12:34:56"
 
     await hass.services.async_call(
         TIME_DOMAIN,
         SERVICE_SET_VALUE,
-        {ATTR_ENTITY_ID: "time.test_my_time", ATTR_TIME: "01:23:45"},
+        {ATTR_ENTITY_ID: "time.test_mytime", ATTR_TIME: "01:23:45"},
         blocking=True,
     )
     mock_client.time_command.assert_has_calls([call(1, 1, 23, 45, device_id=0)])
@@ -71,6 +71,6 @@ async def test_generic_time_missing_state(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("time.test_my_time")
+    state = hass.states.get("time.test_mytime")
     assert state is not None
     assert state.state == STATE_UNKNOWN
diff --git a/tests/components/esphome/test_update.py b/tests/components/esphome/test_update.py
index 859189f5ed9..67be65dc6fa 100644
--- a/tests/components/esphome/test_update.py
+++ b/tests/components/esphome/test_update.py
@@ -35,7 +35,7 @@ from tests.typing import WebSocketGenerator
 
 RELEASE_SUMMARY = "This is a release summary"
 RELEASE_URL = "https://esphome.io/changelog"
-ENTITY_ID = "update.test_my_update"
+ENTITY_ID = "update.test_myupdate"
 
 
 @pytest.fixture(autouse=True)
diff --git a/tests/components/esphome/test_valve.py b/tests/components/esphome/test_valve.py
index 4f57a27708c..70dee7201d4 100644
--- a/tests/components/esphome/test_valve.py
+++ b/tests/components/esphome/test_valve.py
@@ -54,7 +54,7 @@ async def test_valve_entity(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("valve.test_my_valve")
+    state = hass.states.get("valve.test_myvalve")
     assert state is not None
     assert state.state == ValveState.OPENING
     assert state.attributes[ATTR_CURRENT_POSITION] == 50
@@ -62,7 +62,7 @@ async def test_valve_entity(
     await hass.services.async_call(
         VALVE_DOMAIN,
         SERVICE_CLOSE_VALVE,
-        {ATTR_ENTITY_ID: "valve.test_my_valve"},
+        {ATTR_ENTITY_ID: "valve.test_myvalve"},
         blocking=True,
     )
     mock_client.valve_command.assert_has_calls([call(key=1, position=0.0, device_id=0)])
@@ -71,7 +71,7 @@ async def test_valve_entity(
     await hass.services.async_call(
         VALVE_DOMAIN,
         SERVICE_OPEN_VALVE,
-        {ATTR_ENTITY_ID: "valve.test_my_valve"},
+        {ATTR_ENTITY_ID: "valve.test_myvalve"},
         blocking=True,
     )
     mock_client.valve_command.assert_has_calls([call(key=1, position=1.0, device_id=0)])
@@ -80,7 +80,7 @@ async def test_valve_entity(
     await hass.services.async_call(
         VALVE_DOMAIN,
         SERVICE_SET_VALVE_POSITION,
-        {ATTR_ENTITY_ID: "valve.test_my_valve", ATTR_POSITION: 50},
+        {ATTR_ENTITY_ID: "valve.test_myvalve", ATTR_POSITION: 50},
         blocking=True,
     )
     mock_client.valve_command.assert_has_calls([call(key=1, position=0.5, device_id=0)])
@@ -89,7 +89,7 @@ async def test_valve_entity(
     await hass.services.async_call(
         VALVE_DOMAIN,
         SERVICE_STOP_VALVE,
-        {ATTR_ENTITY_ID: "valve.test_my_valve"},
+        {ATTR_ENTITY_ID: "valve.test_myvalve"},
         blocking=True,
     )
     mock_client.valve_command.assert_has_calls([call(key=1, stop=True, device_id=0)])
@@ -99,7 +99,7 @@ async def test_valve_entity(
         ESPHomeValveState(key=1, position=0.0, current_operation=ValveOperation.IDLE)
     )
     await hass.async_block_till_done()
-    state = hass.states.get("valve.test_my_valve")
+    state = hass.states.get("valve.test_myvalve")
     assert state is not None
     assert state.state == ValveState.CLOSED
 
@@ -109,7 +109,7 @@ async def test_valve_entity(
         )
     )
     await hass.async_block_till_done()
-    state = hass.states.get("valve.test_my_valve")
+    state = hass.states.get("valve.test_myvalve")
     assert state is not None
     assert state.state == ValveState.CLOSING
 
@@ -117,7 +117,7 @@ async def test_valve_entity(
         ESPHomeValveState(key=1, position=1.0, current_operation=ValveOperation.IDLE)
     )
     await hass.async_block_till_done()
-    state = hass.states.get("valve.test_my_valve")
+    state = hass.states.get("valve.test_myvalve")
     assert state is not None
     assert state.state == ValveState.OPEN
 
@@ -151,7 +151,7 @@ async def test_valve_entity_without_position(
         user_service=user_service,
         states=states,
     )
-    state = hass.states.get("valve.test_my_valve")
+    state = hass.states.get("valve.test_myvalve")
     assert state is not None
     assert state.state == ValveState.OPENING
     assert ATTR_CURRENT_POSITION not in state.attributes
@@ -159,7 +159,7 @@ async def test_valve_entity_without_position(
     await hass.services.async_call(
         VALVE_DOMAIN,
         SERVICE_CLOSE_VALVE,
-        {ATTR_ENTITY_ID: "valve.test_my_valve"},
+        {ATTR_ENTITY_ID: "valve.test_myvalve"},
         blocking=True,
     )
     mock_client.valve_command.assert_has_calls([call(key=1, position=0.0, device_id=0)])
@@ -168,7 +168,7 @@ async def test_valve_entity_without_position(
     await hass.services.async_call(
         VALVE_DOMAIN,
         SERVICE_OPEN_VALVE,
-        {ATTR_ENTITY_ID: "valve.test_my_valve"},
+        {ATTR_ENTITY_ID: "valve.test_myvalve"},
         blocking=True,
     )
     mock_client.valve_command.assert_has_calls([call(key=1, position=1.0, device_id=0)])
@@ -178,6 +178,6 @@ async def test_valve_entity_without_position(
         ESPHomeValveState(key=1, position=0.0, current_operation=ValveOperation.IDLE)
     )
     await hass.async_block_till_done()
-    state = hass.states.get("valve.test_my_valve")
+    state = hass.states.get("valve.test_myvalve")
     assert state is not None
     assert state.state == ValveState.CLOSED
