# Pin configuration:
# 3.3V
# RESET
# SVP/GPIO36
# SVN/GPIO39
# GPIO34 IR Demod RX
# GPIO35 IR Mod RX
# GPIO32 IR TX
# GPIO33
# GPIO25
# GPIO26
# GPIO27
# GPIO14
# GPIO12
# GND IR Ground
# GPIO13
# SD2/GPIO9 *Internal flash
# SD3/GPIO10 *Internal flash
# CND/GPIO11 *Internal flash
# 5V IR Power

# GND CEC Shield
# GPIO23
# GPIO22
# TX/GPIO1
# RX/GPIO3
# GPIO21
# GND CEC Ground
# GPIO19 CEC Data
# GPIO18
# GPIO5
# GPIO17
# GPIO16
# GPIO4
# GPIO0
# GPIO2
# GPIO15
# SD1/GPIO8 *Internal flash
# SDD/GPIO7 *Internal flash
# CLK/GPIO6 *Internal flash

esphome:
  name: livingroom-esphome
  platformio_options:
    platform: platformio/espressif32@4.2.0
    build_flags:
    # 4* the default stack size
    - -DARDUINO_LOOP_STACK_SIZE=32768

external_components:
- source: ../../../esphome/esphome/components
  components:
  - hdmi_cec
#- source: github://johnboiles/esphome@hdmi-cec
#  components:
#  - hdmi_cec

#  - source: github://quentinmit/esphome@remote
#    components: [ remote_receiver ]
#    refresh: 60s

esp32:
  board: nodemcu-32s
  framework:
    type: arduino
    version: 2.0.2

# Enable logging
logger:
  level: VERBOSE
#  logs:
#    remote.nec: DEBUG

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

mqtt:
  broker: !secret mqtt_broker
  discovery: false
  on_json_message:
  - topic: livingroom/cec/tx
    then:
    - lambda: |
        uint8_t destination = 0;
        uint8_t source = 5;
        if (x.containsKey("destination")) {
          destination = x["destination"];
        }
        if (x.containsKey("source")) {
          source = x["source"];
        }
        std::vector<uint8_t> data;
        for(JsonVariantConst v : x["data"].as<JsonArrayConst>()) {
          data.push_back(v.as<uint8_t>());
        }
        id(my_hdmi_cec).send_data(source, destination, data);
  - topic: livingroom/ir/tx
    then:
    - if:
        condition:
          lambda: 'return x.containsKey("type") && x["type"] == "nec";'
        then:
          remote_transmitter.transmit_nec:
            address: !lambda |-
              uint8_t address_l = 0;
              uint8_t address_h = 0;
              if (x.containsKey("d")) {
                address_l = x["d"];
                address_h = ~address_l;
              }
              if (x.containsKey("s")) {
                address_h = x["s"];
              }
              int address = (address_h << 8) | address_l;
              if (x.containsKey("address")) {
                address = x["address"];
              }
              ESP_LOGD("mqtt-ir-trigger", "NEC address: %d", address);
              return address;
            command: !lambda |-
              int command = 0;
              if (x.containsKey("f")) {
                uint8_t f = x["f"];
                command = f | (~f) << 8;
              }
              if (x.containsKey("command")) {
                command = x["command"];
              }
              ESP_LOGD("mqtt-ir-trigger", "NEC command: %d", command);
              return command;
        else:
        - lambda: |-
            if (x.containsKey("type") {
              const char* foo = x["type"];
              ESP_LOGD("mqtt-ir-trigger", "Unknown type \"%s\"", foo);
            } else {
              ESP_LOGD("mqtt-ir-trigger", "Missing type field");
            }
#          - logger.log:
#              format: Unknown type "%s"
#              args: [ 'x["type"].as<const String&>().c_str()' ]

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .guest.isz.wtf

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Livingroom-Esphome"
    password: !secret fallback_password

captive_portal:

remote_receiver:
  pin: GPIO34
#  pin: GPIO35
#  demod_threshold: 25us
#  memory_blocks: 6
#  idle: 1ms #3ms
  dump: all
  on_nec:
    then:
    - mqtt.publish_json:
        topic: livingroom/ir/rx
        payload: |-
          root["type"] = "nec";
          root["address"] = x.address;
          uint8_t d = x.address & 0xFF;
          root["d"] = d;
          uint8_t s = x.address >> 8;
          if (s != ~d) {
            root["s"] = s;
          }
          uint8_t f = x.command & 0xFF;
          root["f"] = f;
          root["command"] = x.command;
          ESP_LOGD("mqtt-ir-receive", "NEC command: D=%d, S=%d, F=%d", d, s, f);
  on_raw:
    then:
    - mqtt.publish_json:
        topic: livingroom/ir/raw_rx
        payload: |-
          root["type"] = "raw";
          JsonArray array = root.createNestedArray("data");
          for (int n: x) {
            array.add(n);
          }

remote_transmitter:
  pin:
    number: GPIO32
    mode:
      output: true
  carrier_duty_percent: 50%

<<: !include include/livingroom-esphome-ir.yaml

hdmi_cec:
  id: my_hdmi_cec
  # The initial logical address -- corresponds to device type. This may be
  # reassigned if there are other devices of the same type on the CEC bus.
  address: 0x05 # Audio system
  # Promiscuous mode can be enabled to allow receiving messages not intended for us
  promiscuous_mode: true
  # Typically the physical address is discovered based on the point-to-point
  # topology of the HDMI connections using the DDC line. We don't have access
  # to that so we just hardcode a physical address.
  physical_address: 0x3000
  pin: GPIO19
  on_message:
    - then:
      - mqtt.publish_json:
          topic: livingroom/cec/rx
          payload: |-
            root["source"] = source;
            root["destination"] = destination;
            JsonArray array = root.createNestedArray("data");
            for (int n: data) {
              array.add(n);
            }
            if (data.size() >= 1) {
              root["opcode"] = data[0];
            }
            root["ack"] = ack;
    - data: [0x44, 0x41] # Press: volume up
      then:
      - button.press: ir_receiver_vol_up
    - data: [0x44, 0x42] # Press: volume down
      then:
      - button.press: ir_receiver_vol_down
#    - then:
#        - lambda: |-
#            ESP_LOGD("mqtt-ir-trigger", "Unknown type \"%s\"", foo);
#        - logger.log: 
#    - opcode: 0xC3 # Request ARC start
#      then:
#        - hdmi_cec.send: # Report ARC started
#            destination: 0x0
#            data: [ 0xC1 ]
    - destination: 0x05
      opcode: 0x8F # Give Power Status
      then:
      - lambda: |
          std::vector<uint8_t> out_data;
          out_data.push_back(0x90); // Report Power Status
          out_data.push_back(0x00); // On
          id(my_hdmi_cec).send_data(5, source, out_data);
    - opcode: 0x46 # Give OSD name
      destination: 0x05
      then:
        - hdmi_cec.send:
            destination: 0x0
            data: [0x47, 0x65, 0x73, 0x70, 0x68, 0x6F, 0x6D, 0x65] # esphome
#    - opcode: 0x71 # Give audio status
#      source: 0x0 # From the TV
#      then:
#        - hdmi_cec.send:
#            destination: 0x0
#            data: [ 0x7A, 0x7F ]
#    - data: [0x44, 0x41] # User control pressed: volume up
#      then:
#        - logger.log: "Volume up"
