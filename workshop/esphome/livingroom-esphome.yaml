esphome:
  name: livingroom-esphome
# Until arduino-esp32 2.0.0+ is the default, add 4* to the stack size in .esphome/platformio/packages/framework-arduinoespressif32/cores/esp32/main.cpp
#  platformio_options:
#    platform: https://github.com/platformio/platform-espressif32.git#feature/arduino-upstream
#    platform_packages:
#    - framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.2
#    build_flags:
#    - -DCONFIG_ARDUINO_LOOP_STACK_SIZE=16384

#external_components:
#  - source: github://quentinmit/esphome@remote
#    components: [ remote_receiver ]
#    refresh: 60s

esp32:
  board: nodemcu-32s
#  framework:
#    type: arduino
#    version: 2.0.2

# Enable logging
logger:
  level: VERBOSE
#  logs:
#    remote.nec: DEBUG

# Enable Home Assistant API
api:

ota:
  password: !secret ota_password

mqtt:
  broker: !secret mqtt_broker
  discovery: false
  on_json_message:
  - topic: livingroom/ir/tx
    then:
    - if:
        condition:
          lambda: 'return x.containsKey("type") && x["type"] == "nec";'
        then:
          remote_transmitter.transmit_nec:
            address: !lambda |-
              uint8_t address_l = 0;
              uint8_t address_h = 0;
              if (x.containsKey("d")) {
                address_l = x["d"];
                address_h = ~address_l;
              }
              if (x.containsKey("s")) {
                address_h = x["s"];
              }
              int address = (address_h << 8) | address_l;
              if (x.containsKey("address")) {
                address = x["address"];
              }
              ESP_LOGD("mqtt-ir-trigger", "NEC address: %d", address);
              return address;
            command: !lambda |-
              int command = 0;
              if (x.containsKey("f")) {
                uint8_t f = x["f"];
                command = f | (~f) << 8;
              }
              if (x.containsKey("command")) {
                command = x["command"];
              }
              ESP_LOGD("mqtt-ir-trigger", "NEC command: %d", command);
              return command;
        else:
        - lambda: |-
            const char* foo = x["type"];
            ESP_LOGD("mqtt-ir-trigger", "Unknown type \"%s\"", foo);
#          - logger.log:
#              format: Unknown type "%s"
#              args: [ 'x["type"].as<const String&>().c_str()' ]

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: .guest.isz.wtf

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Livingroom-Esphome"
    password: !secret fallback_password

captive_portal:

remote_receiver:
  pin: GPIO34
#  pin: GPIO35
#  demod_threshold: 25us
#  memory_blocks: 6
#  idle: 1ms #3ms
  dump: all
  on_nec:
    then:
    - mqtt.publish_json:
        topic: livingroom/ir/rx
        payload: |-
          root["type"] = "nec";
          root["address"] = x.address;
          uint8_t d = x.address & 0xFF;
          root["d"] = d;
          uint8_t s = x.address >> 8;
          if (s != ~d) {
            root["s"] = s;
          }
          uint8_t f = x.command & 0xFF;
          root["f"] = f;
          root["command"] = x.command;
          ESP_LOGD("mqtt-ir-receive", "NEC command: D=%d, S=%d, F=%d", d, s, f);
  on_raw:
    then:
    - mqtt.publish_json:
        topic: livingroom/ir/raw_rx
        payload: |-
          root["type"] = "raw";
          JsonArray array = root.createNestedArray("data");
          for (int n: x) {
            array.add(n);
          }

remote_transmitter:
  pin:
    number: GPIO32
    mode:
      output: true
  carrier_duty_percent: 50%

<<: !include include/livingroom-esphome-ir.yaml
