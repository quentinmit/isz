{% from "include/_ir-macros.yaml.jinja" import device_buttons with context %}

{#
# Doesn't work and the button component auto-generates MQTT buttons.
mqtt:
  on_message:
  {{ device_mqtt("Receiver", receiver_ir) }}
  {{ device_mqtt("TV", tv_ir) }}
#}

button:
{{ device_buttons("Receiver", receiver_ir) }}
{{ device_buttons("TV", tv_ir) }}
{{ device_buttons("HDMI Switch", hdmi_switch_ir) }}

{% macro tv_input(name, tv_port, switch_port=None) %}
  - if:
      condition:
        lambda: |-
          return x == "{{ name }}";
      then:
      - button.press: ir_tv_dash
      - delay: 100ms
      {%- for _ in range(tv_port) %}
      - button.press: ir_tv_input
      - delay: 100ms
      {%- endfor %}
      - button.press: ir_tv_enter
      - delay: 100ms
      {%- if switch_port is not none %}
      - button.press: ir_hdmi_switch_{{ switch_port }}
      {%- endif %}
{% endmacro %}

select:
- platform: template
  name: "Receiver Source"
  optimistic: true
  options: {{ receiver_sources.keys() | list | tojson }}
  set_action:
  {%- for key, value in receiver_sources.items() %}
  - if:
      condition:
        lambda: |-
          return x == "{{ key }}";
      then: {% if value is string -%}
      { button.press: ir_receiver_{{value}} }
      {%- else -%}
      {{ value | tojson }}
      {%- endif %}
  {%- endfor %}
- platform: template
  name: "TV Source"
  optimistic: true
  options: {{ flatten(tv_sources) | tojson }}
  set_action:
  {%- for name in tv_sources %}
  {%- if name is string %}
  {{- tv_input(name, loop.index) }}
  {%- else %}
  {%- set tv_port = loop.index %}
  {%- for name in name %}
  {{- tv_input(name, tv_port, loop.index) }}
  {%- endfor %}
  {%- endif %}
  {%- endfor %}