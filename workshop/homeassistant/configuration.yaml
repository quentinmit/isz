
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

homeassistant:
  name: Ice Station Zebra
  latitude: 42.36878992741952
  longitude: -71.09414972830565
  elevation: 3
  unit_system: imperial
  currency: USD
  country: US
  time_zone: America/New_York
  external_url: https://homeassistant.isz.wtf

http:
  use_x_forwarded_for: true
  trusted_proxies: 127.0.0.1

google_assistant:
  project_id: api-project-64499786246
  service_account: !include service-account.json
  report_state: true
  exposed_domains:
    - scene
    - switch
    - light
    - climate
  entity_config:
    media_player.tv:
      expose: true
    media_player.receiver:
      expose: true
#  entity_config:
#    switch.kitchen:
#      name: CUSTOM_NAME_FOR_GOOGLE_ASSISTANT
#      aliases:
#        - BRIGHT_LIGHTS
#        - ENTRY_LIGHTS
#    light.living_room:
#      expose: false
#      room: LIVING_ROOM

influxdb:
  api_version: 2
  ssl: true
  host: influx.isz.wtf
  port: 443
  token: !secret ha_influx_write_token
  organization: 44ff94dc2f766f90
  bucket: home_assistant
  tags:
    source: HA
  tags_attributes:
    - friendly_name
    - device_class

sensor:
  - platform: template
    sensors:
      sun_rising_text:
        friendly_name: "Sun Rising Text"
        value_template: "{{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom ('%H:%M') }}"
      sun_setting_text:
        friendly_name: "Sun Setting Text"
        value_template: "{{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom ('%H:%M') }}"
      accuweather_temperature_min_0d:
        value_template: "{{ state_attr('weather.accuweather', 'forecast')[0].templow }}"
      accuweather_temperature_max_0d:
        value_template: "{{ state_attr('weather.accuweather', 'forecast')[0].temperature }}"
  - platform: influxdb
    api_version: 2
    ssl: true
    host: influx.isz.wtf
    port: 443
    token: !secret ha_influx_read_token
    organization: 44ff94dc2f766f90
    bucket: icestationzebra
    queries_flux:
    - name: "Workshop Temperature"
      unique_id: sensor.workshop_temperature
      unit_of_measurement: °F
      query: >
        filter(fn: (r) => r._measurement == "temp" and r.chip == "w1" and r.sensor == "00000284b00d")
        |> map(fn: (r) => ({r with _value: r._value * 9./5. + 32.}))
      group_function: last
    - name: "Bedroom Bed Temperature"
      unique_id: sensor.bedroom_bed_temperature
      unit_of_measurement: °F
      query: >
        filter(fn: (r) => r._measurement == "temp" and r.chip == "w1" and r.sensor == "00000284c7a7")
        |> map(fn: (r) => ({r with _value: r._value * 9./5. + 32.}))
      group_function: last
    - name: "Outdoor Temperature"
      unique_id: sensor.outdoor_temperature
      unit_of_measurement: °F
      query: >
        filter(fn: (r) => r._measurement == "temp" and r.chip == "w1" and r.sensor == "0120541bbaa7")
        |> map(fn: (r) => ({r with _value: r._value * 9./5. + 32.}))
      group_function: last
    - name: "Eversource Power"
      unique_id: sensor.eversource_power
      unit_of_measurement: W
      bucket: rtlamr
      query: >
        filter(fn: (r) => r["_measurement"] == "rtlamr")
        |> filter(fn: (r) => r["_field"] == "consumption")
        |> filter(fn: (r) => r["endpoint_id"] == "21583380")
        |> filter(fn: (r) => r["msg_type"] == "differential")
        |> map(fn: (r) => ({r with _value: float(v: r._value * 10 * 12)}))
      group_function: mean
    - name: "Download Speed"
      unique_id: sensor.download_speed
      unit_of_measurement: Mbps
      bucket: speedtest
      range_start: -6h
      query: >-
        filter(fn: (r) => r["_measurement"] == "speedtest")
        |> filter(fn: (r) => r["_field"] == "download_mbs")
      group_function: last
    - name: "Upload Speed"
      unique_id: sensor.upload_speed
      unit_of_measurement: Mbps
      bucket: speedtest
      range_start: -6h
      query: >-
        filter(fn: (r) => r["_measurement"] == "speedtest")
        |> filter(fn: (r) => r["_field"] == "upload_mbs")
      group_function: last

switch:
- platform: template
  switches:
    receiver_power:
      friendly_name: Receiver Power
      unique_id: livingroom.receiver_power
      value_template: "{{ (states('sensor.receiver_power_electric_consumed_w') | float ) > 10 }}"
      turn_on:
      - condition: state
        entity_id: switch.receiver_power
        state: "off"
      - service: button.press
        target:
          entity_id: button.receiver_power
      turn_off:
      - condition: state
        entity_id: switch.receiver_power
        state: "on"
      - service: button.press
        target:
          entity_id: button.receiver_power
    tv_power:
      friendly_name: TV Power
      unique_id: livingroom.tv_power
      value_template: "{{ (states('sensor.tv_power_electric_consumed_w') | float ) > 10 }}"
      turn_on:
      - condition: state
        entity_id: switch.tv_power
        state: "off"
      - service: button.press
        target:
          entity_id: button.tv_power
      turn_off:
      - condition: state
        entity_id: switch.tv_power
        state: "on"
      - service: button.press
        target:
          entity_id: button.tv_power
#      - service: mqtt.publish
#        data:
#          topic: livingroom/ir/tx
#          payload: |
#            {
#              "type": "nec",
#              "d": 0,
#              "s": 127,
#              "f": 10
#            }

media_player:
- platform: universal
  name: TV
  device_class: tv
  commands:
    turn_on:
      service: switch.turn_on
      target:
        entity_id:
        - switch.tv_power
        - switch.receiver_power
    turn_off:
      service: switch.turn_off
      target:
        entity_id:
        - switch.tv_power
        - switch.receiver_power
    volume_up:
      service: button.press
      target:
        entity_id: button.receiver_vol_up
    volume_down:
      service: button.press
      target:
        entity_id: button.receiver_vol_down
    volume_mute:
      service: button.press
      target:
        entity_id: button.receiver_mute
  attributes:
    state: switch.tv_power
- platform: universal
  name: Receiver
  device_class: receiver
  commands:
    turn_on:
      service: switch.turn_on
      target:
        entity_id:
        - switch.receiver_power
    turn_off:
      service: switch.turn_off
      target:
        entity_id:
        - switch.receiver_power
    volume_up:
      service: button.press
      target:
        entity_id: button.receiver_vol_up
    volume_down:
      service: button.press
      target:
        entity_id: button.receiver_vol_down
    volume_mute:
      service: button.press
      target:
        entity_id: button.receiver_mute
    select_source:
      service: select.select_option
      data:
        option: "{{ source }}"
      target:
        entity_id: select.receiver_source
  attributes:
    state: switch.receiver_power
    source: select.receiver_source
    source_list: select.receiver_source|options

# Text to speech
tts:
  - platform: google_translate

group: !include groups.yaml
automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml
