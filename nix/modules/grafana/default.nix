{ config, pkgs, lib, ... }:
with import ./types.nix { inherit lib pkgs; };
let
  cfg = config.services.grafana.dashboards;
in {
  options = with lib; {
    services.grafana.dashboards = mkOption {
      description = "Predefined Grafana dashboards";
      type = with types; attrsOf (submodule {
        freeformType = dashboardFormat.type;
        options = {
          uid = mkOption {
            type = with types; nullOr (strMatching ".{8,40}");
            default = null;
            description = "Unique dashboard identifier that can be generated by anyone.";
          };
          title = mkOption {
            type = types.str;
            description = "Title of dashboard.";
          };
          description = mkOption {
            type = with types; nullOr str;
            default = null;
            description = "Description of dashboard.";
          };
          tags = mkOption {
            type = with types; listOf str;
            default = [];
            description = "Tags associated with dashboard.";
          };
          style = mkOption {
            type = types.enum ["light" "dark"];
            default = "dark";
            description = "Theme of dashboard.";
          };
          timezone = mkOption {
            type = types.str;
            default = "";
            description = ''Timezone of dashboard. Accepts IANA TZDB zone ID or "browser" or "utc".'';
          };
          editable = mkOption {
            type = types.bool;
            default = true;
            description = "Whether a dashboard is editable or not.";
          };
          time.from = mkOption {
            type = types.str;
            default = "now-6h";
          };
          time.to = mkOption {
            type = types.str;
            default = "now";
          };
          refresh = mkOption {
            type = Interval;
            default = "";
            description = "Refresh rate of dashboard.";
          };
          schemaVersion = mkOption {
            type = types.int;
            default = 36;
          };
          panels = mkOption {
            type = with types; listOf Panel;
            default = [];
          };
          templating.list = mkOption {
            type = with types; listOf dashboardFormat.type;
            default = [];
          };
          annotations.list = mkOption {
            type = with types; listOf dashboardFormat.type;
            default = [{
              builtIn = 1;
              datasource.type = "grafana";
              datasource.uid = "-- Grafana --";
              enable = true;
              hide = true;
              iconColor = "rgba(0, 211, 255, 1)";
              name = "Annotations & Alerts";
              target.limit = 100;
              target.matchAny = false;
              target.tags = [];
              target.type = "dashboard";
              type = "dashboard";
            }];
          };
          links = mkOption {
            type = with types; listOf dashboardFormat.type;
            default = [];
          };
        };
      });
    };
  };
  config = lib.mkIf (cfg != {}) {
    environment.etc."grafana/dashboards".source = pkgs.linkFarm "grafana-dashboards" (
      lib.mapAttrs' (name: d: lib.nameValuePair "${name}.json" (
        dashboardFormat.generate "${name}.json" d
      )) cfg
    );
    services.grafana.provision.enable = true;
    services.grafana.provision.dashboards.settings.providers = [{
      options.path = "/etc/grafana/dashboards";
      options.updateIntervalSeconds = 10;
      options.foldersFromFilesStructure = true;
    }];
  };
}
