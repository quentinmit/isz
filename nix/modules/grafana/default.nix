{ config, pkgs, lib, ... }:
let
  dashboardFormat = pkgs.formats.json {};
  cfg = config.services.grafana.dashboards;
in {
  options = with lib; let
    Interval = types.strMatching "^$|([0-9]+[smhd])";
    Panel = types.submodule {
      freeformType = dashboardFormat.type;
      options = {
        type = mkOption {
          type = types.strMatching ".+";
        };
        title = mkOption {
          type = with types; nullOr str;
          default = null;
        };
        description = mkOption {
          type = with types; nullOr str;
          default = "";
        };
        gridPos = mkOption {
          type = with types; nullOr GridPos;
          default = null;
        };
        links = mkOption {
          type = with types; nullOr DashboardLink;
          default = [];
        };
        repeat = mkOption {
          type = with types; nullOr str;
          default = null;
          description = "Name of template variable to repeat for.";
        };
        repeatDirection = mkOption {
          type = types.enum ["h" "v"];
          default = "h";
          description = ''
            Direction to repeat in if 'repeat' is set.
					  "h" for horizontal, "v" for vertical.
          '';
        };
        interval = mkOption {
          type = with types; nullOr Interval;
          default = null;
        };
        options = mkOption {
          type = dashboardFormat.type;
          default = {};
        };
        fieldConfig = mkOption {
          type = FieldConfigSource;
          default = {};
        };
      };
    };
    FieldConfigSource = types.submodule {
      options = {
        defaults = mkOption {
          type = FieldConfig;
          default = {};
        };
        overrides = mkOption {
          type = with types; listOf (submodule {
            options = {
              matcher = mkOption {
                type = MatcherConfig;
              };
              properties = mkOption {
                type = types.listOf DynamicConfigValue;
              };
            };
          });
          default = [];
        };
      };
    };
    FieldConfig = types.submodule {
      freeformType = dashboardFormat.type;
      options = {
        displayName = mkOption {
          type = with types; nullOr str;
          default = null;
        };
        unit = mkOption {
          type = with types; nullOr str;
          default = null;
        };
        min = mkOption {
          type = with types; nullOr number;
          default = null;
        };
        max = mkOption {
          type = with types; nullOr number;
          default = null;
        };
        color = mkOption {
          type = with types; nullOr FieldColor;
          default = {
            mode = "palette-classic";
          };
        };
      };
    };
    FieldColor = types.submodule {
      options = {
        mode = mkOption {
          type = with types; either (enum ["thresholds" "palette-classic" "palette-saturated" "continuous-GrYlRd" "fixed"]) str;
        };
        fixedColor = mkOption {
          type = with types; nullOr str;
          default = null;
        };
        seriesBy = mkOption {
          type = with types; nullOr (enum ["min" "max" "last"]);
          default = null;
        };
      };
    };
    MatcherConfig = types.submodule {
      options = {
        id = mkOption {
          type = types.str;
          default = "";
        };
        options = mkOption {
          type = dashboardFormat.type;
        };
      };
    };
    DynamicConfigValue = types.submodule {
      options = {
        id = mkOption {
          type = types.str;
          default = "";
        };
        value = mkOption {
          type = dashboardFormat.type;
        };
      };
    };
    GridPos = types.submodule {
      options = {
        h = mkOption {
          type = types.ints.positive;
          default = 8;
        };
        w = mkOption {
          type = types.ints.between 1 24;
          default = 12;
        };
        x = mkOption {
          type = types.ints.between 0 23;
          default = 0;
        };
        y = mkOption {
          type = types.ints.unsigned;
          default = 0;
        };
      };
    };
    DashboardLink = dashboardFormat.type;
  in {
    services.grafana.dashboards = mkOption {
      description = "Predefined Grafana dashboards";
      type = with types; attrsOf (submodule {
        freeformType = dashboardFormat.type;
        options = {
          uid = mkOption {
            type = with types; nullOr (strMatching ".{8,40}");
            default = null;
            description = "Unique dashboard identifier that can be generated by anyone.";
          };
          title = mkOption {
            type = types.str;
            description = "Title of dashboard.";
          };
          description = mkOption {
            type = with types; nullOr str;
            default = null;
            description = "Description of dashboard.";
          };
          tags = mkOption {
            type = with types; listOf str;
            default = [];
            description = "Tags associated with dashboard.";
          };
          style = mkOption {
            type = types.enum ["light" "dark"];
            default = "dark";
            description = "Theme of dashboard.";
          };
          timezone = mkOption {
            type = types.str;
            default = "";
            description = ''Timezone of dashboard. Accepts IANA TZDB zone ID or "browser" or "utc".'';
          };
          editable = mkOption {
            type = types.bool;
            default = true;
            description = "Whether a dashboard is editable or not.";
          };
          time.from = mkOption {
            type = types.str;
            default = "now-6h";
          };
          time.to = mkOption {
            type = types.str;
            default = "now";
          };
          refresh = mkOption {
            type = Interval;
            default = "";
            description = "Refresh rate of dashboard.";
          };
          schemaVersion = mkOption {
            type = types.int;
            default = 36;
          };
          panels = mkOption {
            type = with types; listOf Panel;
            default = [];
          };
          templating.list = mkOption {
            type = with types; listOf dashboardFormat.type;
            default = [];
          };
          annotations.list = mkOption {
            type = with types; listOf dashboardFormat.type;
            default = [{
              builtIn = 1;
              datasource.type = "grafana";
              datasource.uid = "-- Grafana --";
              enable = true;
              hide = true;
              iconColor = "rgba(0, 211, 255, 1)";
              name = "Annotations & Alerts";
              target.limit = 100;
              target.matchAny = false;
              target.tags = [];
              target.type = "dashboard";
              type = "dashboard";
            }];
          };
          links = mkOption {
            type = with types; listOf dashboardFormat.type;
            default = [];
          };
        };
      });
    };
  };
  config = lib.mkIf (cfg != {}) {
    services.grafana.provision.enable = true;
    services.grafana.provision.dashboards.settings.providers = let
      dashboardPkg = pkgs.linkFarm "grafana-dashboards" (
        lib.mapAttrs' (name: d: lib.nameValuePair "${name}.json" (
          dashboardFormat.generate "${name}.json" d
        )) cfg
      );
    in [{
      options.path = "${dashboardPkg}";
      options.foldersFromFilesStructure = true;
    }];
  };
}
